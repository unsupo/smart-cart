import { Grid } from './Grid.model';
import { GridPoint } from './GridPoint.model';
import { GridRectangle } from './GridRectangle.model';
import { WidgetConfig } from './WidgetConfig.model';
export declare class GridRenderer {
    _grid: Grid;
    grid: Grid;
    positions: any;
    cachedNextPosition: GridRectangle;
    obstructions: any[];
    constructor(grid: Grid);
    rasterizeCoords(left: number, top: number, gridWidth: number, gridHeight: number): GridPoint;
    getWidgetIdAt(i: number, j: number): string;
    getWidgetPosition(widget: WidgetConfig): any;
    setWidgetPosition(widgetId: string, newPosition: GridRectangle): void;
    hasSpaceLeft(): boolean;
    getNextPosition(): GridRectangle;
    isObstructed(i: number, j: number, excludedArea?: GridRectangle): boolean;
    _isObstructed(i: number, j: number): boolean;
    isAreaObstructed(area: GridRectangle, options?: any): boolean;
    getStyle(widgetId: string): any;
    setObstructionValues(area: GridRectangle, value: number): void;
    findLargestEmptyArea(): GridRectangle;
    _findLargestEmptyAreaFrom(start: GridPoint): any;
    render(grid: Grid, emitWidgetPositionUpdated?: Function): void;
}
