import { Component, Input } from '@angular/core';
import { Utils } from '../../Utils';
import { DomSanitizer } from '@angular/platform-browser';
var NgxGridOverlayComponent = /** @class */ (function () {
    function NgxGridOverlayComponent(sanitizer) {
        this.sanitizer = sanitizer;
        this.activeHighlight = null;
        this.gridRows = [];
        this.gridCols = [];
        this._showGrid = false;
    }
    Object.defineProperty(NgxGridOverlayComponent.prototype, "rows", {
        set: function (rows) {
            this.updateGridLines(this.renderer, this.showGrid);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxGridOverlayComponent.prototype, "cols", {
        set: function (rows) {
            this.updateGridLines(this.renderer, this.showGrid);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxGridOverlayComponent.prototype, "renderer", {
        get: function () {
            return this._renderer;
        },
        set: function (renderer) {
            this._renderer = renderer;
            if (Utils.isDefined(renderer)) {
                this.updateGridLines(renderer, this.showGrid);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxGridOverlayComponent.prototype, "highlight", {
        get: function () {
            return this._highlight;
        },
        set: function (highlight) {
            this._highlight = highlight;
            this.clearHighlight();
            if (highlight) {
                this.highlightArea(highlight, this.renderer);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxGridOverlayComponent.prototype, "showGrid", {
        get: function () {
            return this._showGrid;
        },
        set: function (showGrid) {
            this._showGrid = showGrid;
            this.updateGridLines(this.renderer, showGrid);
        },
        enumerable: true,
        configurable: true
    });
    NgxGridOverlayComponent.prototype.updateGridLines = function (renderer, showGrid) {
        this.clearGridLines();
        if (showGrid) {
            this.showGridLines(renderer);
        }
    };
    NgxGridOverlayComponent.prototype.clearHighlight = function () {
        this.activeHighlight = null;
    };
    NgxGridOverlayComponent.prototype.clearGridLines = function () {
        this.gridRows.splice(0);
        this.gridCols.splice(0);
    };
    NgxGridOverlayComponent.prototype.highlightArea = function (area, renderer) {
        var cellSize = renderer.grid.cellSize, cellHeight = cellSize.height, cellWidth = cellSize.width;
        this.activeHighlight = {
            x: (area.left - 1) * cellWidth + '%',
            y: (area.top - 1) * cellHeight + '%',
            height: area.height * cellHeight + '%',
            width: area.width * cellWidth + '%'
        };
        this.sanitizer.bypassSecurityTrustStyle(this.activeHighlight);
    };
    NgxGridOverlayComponent.prototype.showGridLines = function (renderer) {
        var cellHeight = renderer.grid.cellSize.height, cellWidth = renderer.grid.cellSize.width, height = cellHeight + '%', width = cellWidth + '%', rows = renderer.grid.rows, cols = renderer.grid.columns;
        for (var i = 1; i < rows; i += 2) {
            var y = void 0, h = void 0, row = void 0;
            y = (i * cellHeight) + '%';
            h = 'calc(' + height + ' - 1px)';
            row = {
                y: this.sanitizer.bypassSecurityTrustStyle(y),
                height: this.sanitizer.bypassSecurityTrustStyle(h)
            };
            this.gridRows.push(row);
        }
        for (var i = 1; i < cols; i += 2) {
            var x = void 0, w = void 0, col = void 0;
            x = (i * cellWidth) + '%';
            w = 'calc(' + width + ' - 1px)';
            col = {
                x: this.sanitizer.bypassSecurityTrustStyle(x),
                width: this.sanitizer.bypassSecurityTrustStyle(w)
            };
            this.gridCols.push(col);
        }
    };
    NgxGridOverlayComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ngx-grid-overlay',
                    styles: ["\n                 .wg-grid-overlay{overflow:hidden}.wg-grid-overlay *{position:absolute;height:100%;width:100%}.wg-grid-overlay .wg-preview-item{position:absolute;display:inline-block}.wg-grid-overlay .wg-preview-item.wg-preview-row{width:100%;border-top:1px dotted #d7d7d7;border-bottom:1px solid #f0f0f0}.wg-grid-overlay .wg-preview-item.wg-preview-column{height:100%;border-left:1px dotted #d7d7d7;border-right:1px solid #f0f0f0}.wg-grid-overlay .wg-preview-item.wg-preview-highlight{background-color:rgba(0,113,188,0.2);z-index:1}\n               "],
                    template: "\n                 <div class=\"wg-grid-overlay\">\n                     <div *ngFor=\"let row of gridRows\" class=\"wg-preview-item wg-preview-row\" [style.height]=\"row.height\"\n                          [style.top]=\"row.y\"></div>\n                     <div *ngFor=\"let column of gridCols\" class=\"wg-preview-item wg-preview-column\" [style.width]=\"column.width\"\n                          [style.left]=\"column.x\"></div>\n                     <div *ngIf=\"activeHighlight\" class=\"wg-preview-item wg-preview-highlight\" [style.top]=\"activeHighlight.y\"\n                          [style.height]=\"activeHighlight.height\"\n                          [style.left]=\"activeHighlight.x\" [style.width]=\"activeHighlight.width\"></div>\n                 </div>\n               "
                },] },
    ];
    /** @nocollapse */
    NgxGridOverlayComponent.ctorParameters = function () { return [
        { type: DomSanitizer, },
    ]; };
    NgxGridOverlayComponent.propDecorators = {
        'rows': [{ type: Input },],
        'cols': [{ type: Input },],
        'renderer': [{ type: Input },],
        'highlight': [{ type: Input },],
        'showGrid': [{ type: Input },],
    };
    return NgxGridOverlayComponent;
}());
export { NgxGridOverlayComponent };
//# sourceMappingURL=gridOverlay.component.js.map